// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using fitnessCentar.Services.Database;

#nullable disable

namespace fitnessCentar.Services.Migrations
{
    [DbContext(typeof(FitnessCentarContext))]
    [Migration("20240515143126_Pocetna")]
    partial class Pocetna
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("fitnessCentar.Services.Database.Clanarina", b =>
                {
                    b.Property<int>("ClanarinaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClanarinaId"));

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("TipClanarineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VaziDo")
                        .HasColumnType("datetime2");

                    b.HasKey("ClanarinaId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("TipClanarineId");

                    b.ToTable("Clanarinas");

                    b.HasData(
                        new
                        {
                            ClanarinaId = 1,
                            KorisnikId = 3,
                            TipClanarineId = 3,
                            VaziDo = new DateTime(2024, 7, 14, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(250)
                        },
                        new
                        {
                            ClanarinaId = 2,
                            KorisnikId = 4,
                            TipClanarineId = 1,
                            VaziDo = new DateTime(2024, 5, 22, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(258)
                        },
                        new
                        {
                            ClanarinaId = 3,
                            KorisnikId = 5,
                            TipClanarineId = 2,
                            VaziDo = new DateTime(2024, 6, 14, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(263)
                        },
                        new
                        {
                            ClanarinaId = 4,
                            KorisnikId = 6,
                            TipClanarineId = 3,
                            VaziDo = new DateTime(2024, 7, 14, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(269)
                        },
                        new
                        {
                            ClanarinaId = 5,
                            KorisnikId = 7,
                            TipClanarineId = 4,
                            VaziDo = new DateTime(2024, 5, 23, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(273)
                        },
                        new
                        {
                            ClanarinaId = 6,
                            KorisnikId = 8,
                            TipClanarineId = 5,
                            VaziDo = new DateTime(2024, 6, 14, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(319)
                        },
                        new
                        {
                            ClanarinaId = 7,
                            KorisnikId = 9,
                            TipClanarineId = 6,
                            VaziDo = new DateTime(2024, 6, 14, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(325)
                        },
                        new
                        {
                            ClanarinaId = 8,
                            KorisnikId = 10,
                            TipClanarineId = 7,
                            VaziDo = new DateTime(2024, 6, 14, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(330)
                        },
                        new
                        {
                            ClanarinaId = 9,
                            KorisnikId = 11,
                            TipClanarineId = 8,
                            VaziDo = new DateTime(2024, 5, 22, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(335)
                        },
                        new
                        {
                            ClanarinaId = 10,
                            KorisnikId = 12,
                            TipClanarineId = 1,
                            VaziDo = new DateTime(2024, 5, 22, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(339)
                        });
                });

            modelBuilder.Entity("fitnessCentar.Services.Database.Korisnik", b =>
                {
                    b.Property<int>("KorisnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikId"));

                    b.Property<string>("Addresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.HasKey("KorisnikId");

                    b.HasIndex("UlogaId");

                    b.ToTable("Korisniks");

                    b.HasData(
                        new
                        {
                            KorisnikId = 1,
                            Addresa = "Ulica 1",
                            Email = "admin@gmail.com",
                            Ime = "Admin",
                            KorisnickoIme = "admin",
                            PasswordHash = "C5fuEDcAxNxDuUXqOJCU9DYfLpM=",
                            PasswordSalt = "qQ0nSvQ4rOy3pP/Zi95wIw==",
                            Prezime = "Admin",
                            Status = true,
                            Telefon = "060000000",
                            UlogaId = 1
                        },
                        new
                        {
                            KorisnikId = 2,
                            Addresa = "Ulica 2",
                            Email = "uposlenik@gmail.com",
                            Ime = "Uposlenik",
                            KorisnickoIme = "uposlenik",
                            PasswordHash = "C5fuEDcAxNxDuUXqOJCU9DYfLpM=",
                            PasswordSalt = "qQ0nSvQ4rOy3pP/Zi95wIw==",
                            Prezime = "Uposlenik",
                            Status = true,
                            Telefon = "060000001",
                            UlogaId = 2
                        },
                        new
                        {
                            KorisnikId = 3,
                            Addresa = "Ulica 3",
                            Email = "korisnik@gmail.com",
                            Ime = "Korisnik",
                            KorisnickoIme = "korisnik",
                            PasswordHash = "C5fuEDcAxNxDuUXqOJCU9DYfLpM=",
                            PasswordSalt = "qQ0nSvQ4rOy3pP/Zi95wIw==",
                            Prezime = "Korisnik",
                            Status = true,
                            Telefon = "060000002",
                            UlogaId = 3
                        },
                        new
                        {
                            KorisnikId = 4,
                            Addresa = "Ulica 4",
                            Email = "nejlahindic@gmail.com",
                            Ime = "Nejla",
                            KorisnickoIme = "nejlahindic",
                            PasswordHash = "C5fuEDcAxNxDuUXqOJCU9DYfLpM=",
                            PasswordSalt = "qQ0nSvQ4rOy3pP/Zi95wIw==",
                            Prezime = "Hindic",
                            Status = true,
                            Telefon = "060000003",
                            UlogaId = 3
                        },
                        new
                        {
                            KorisnikId = 5,
                            Addresa = "Ulica 5",
                            Email = "edincilic@gmail.com",
                            Ime = "Edin",
                            KorisnickoIme = "edincilic",
                            PasswordHash = "C5fuEDcAxNxDuUXqOJCU9DYfLpM=",
                            PasswordSalt = "qQ0nSvQ4rOy3pP/Zi95wIw==",
                            Prezime = "Cilic",
                            Status = true,
                            Telefon = "060000004",
                            UlogaId = 3
                        },
                        new
                        {
                            KorisnikId = 6,
                            Addresa = "Ulica 6",
                            Email = "darisjahic@gmail.com",
                            Ime = "Daris",
                            KorisnickoIme = "darisjahic",
                            PasswordHash = "C5fuEDcAxNxDuUXqOJCU9DYfLpM=",
                            PasswordSalt = "qQ0nSvQ4rOy3pP/Zi95wIw==",
                            Prezime = "Jahic",
                            Status = true,
                            Telefon = "060000005",
                            UlogaId = 3
                        },
                        new
                        {
                            KorisnikId = 7,
                            Addresa = "Ulica 7",
                            Email = "saracilic@gmail.com",
                            Ime = "Sara",
                            KorisnickoIme = "saracilic",
                            PasswordHash = "C5fuEDcAxNxDuUXqOJCU9DYfLpM=",
                            PasswordSalt = "qQ0nSvQ4rOy3pP/Zi95wIw==",
                            Prezime = "Cilic",
                            Status = true,
                            Telefon = "060000006",
                            UlogaId = 3
                        },
                        new
                        {
                            KorisnikId = 8,
                            Addresa = "Ulica 8",
                            Email = "selmabehrem@gmail.com",
                            Ime = "Selma",
                            KorisnickoIme = "selmabehrem",
                            PasswordHash = "C5fuEDcAxNxDuUXqOJCU9DYfLpM=",
                            PasswordSalt = "qQ0nSvQ4rOy3pP/Zi95wIw==",
                            Prezime = "Behrem",
                            Status = true,
                            Telefon = "060000007",
                            UlogaId = 3
                        },
                        new
                        {
                            KorisnikId = 9,
                            Addresa = "Ulica 9",
                            Email = "kenanmacic@gmail.com",
                            Ime = "Kenan",
                            KorisnickoIme = "kenanmacic",
                            PasswordHash = "C5fuEDcAxNxDuUXqOJCU9DYfLpM=",
                            PasswordSalt = "qQ0nSvQ4rOy3pP/Zi95wIw==",
                            Prezime = "Macic",
                            Status = true,
                            Telefon = "060000008",
                            UlogaId = 3
                        },
                        new
                        {
                            KorisnikId = 10,
                            Addresa = "Ulica 10",
                            Email = "aldijanadjelmo@gmail.com",
                            Ime = "Aldijana",
                            KorisnickoIme = "aldijanadjelmo",
                            PasswordHash = "C5fuEDcAxNxDuUXqOJCU9DYfLpM=",
                            PasswordSalt = "qQ0nSvQ4rOy3pP/Zi95wIw==",
                            Prezime = "Djelmo",
                            Status = true,
                            Telefon = "060000009",
                            UlogaId = 3
                        },
                        new
                        {
                            KorisnikId = 11,
                            Addresa = "Ulica 11",
                            Email = "lanasefer@gmail.com",
                            Ime = "Lana",
                            KorisnickoIme = "lanasefer",
                            PasswordHash = "C5fuEDcAxNxDuUXqOJCU9DYfLpM=",
                            PasswordSalt = "qQ0nSvQ4rOy3pP/Zi95wIw==",
                            Prezime = "Sefer",
                            Status = true,
                            Telefon = "060000010",
                            UlogaId = 3
                        },
                        new
                        {
                            KorisnikId = 12,
                            Addresa = "Ulica 12",
                            Email = "adnanlulic@gmail.com",
                            Ime = "Adnan",
                            KorisnickoIme = "adnanlulic",
                            PasswordHash = "C5fuEDcAxNxDuUXqOJCU9DYfLpM=",
                            PasswordSalt = "qQ0nSvQ4rOy3pP/Zi95wIw==",
                            Prezime = "Lulic",
                            Status = true,
                            Telefon = "060000011",
                            UlogaId = 3
                        });
                });

            modelBuilder.Entity("fitnessCentar.Services.Database.Placanja", b =>
                {
                    b.Property<int>("PlacanjeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlacanjeId"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<float>("Iznos")
                        .HasColumnType("real");

                    b.Property<int?>("TipClanarineId")
                        .HasColumnType("int");

                    b.HasKey("PlacanjeId");

                    b.HasIndex("TipClanarineId");

                    b.ToTable("Placanjas");

                    b.HasData(
                        new
                        {
                            PlacanjeId = 1,
                            Datum = new DateTime(2024, 5, 15, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(39),
                            Iznos = 60f,
                            TipClanarineId = 3
                        },
                        new
                        {
                            PlacanjeId = 2,
                            Datum = new DateTime(2024, 5, 15, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(132),
                            Iznos = 7f,
                            TipClanarineId = 1
                        },
                        new
                        {
                            PlacanjeId = 3,
                            Datum = new DateTime(2024, 5, 15, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(138),
                            Iznos = 30f,
                            TipClanarineId = 2
                        },
                        new
                        {
                            PlacanjeId = 4,
                            Datum = new DateTime(2024, 5, 15, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(143),
                            Iznos = 15f,
                            TipClanarineId = 4
                        },
                        new
                        {
                            PlacanjeId = 5,
                            Datum = new DateTime(2024, 5, 15, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(148),
                            Iznos = 25f,
                            TipClanarineId = 5
                        },
                        new
                        {
                            PlacanjeId = 6,
                            Datum = new DateTime(2024, 5, 15, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(169),
                            Iznos = 100f,
                            TipClanarineId = 6
                        },
                        new
                        {
                            PlacanjeId = 7,
                            Datum = new DateTime(2024, 5, 15, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(181),
                            Iznos = 20f,
                            TipClanarineId = 7
                        },
                        new
                        {
                            PlacanjeId = 8,
                            Datum = new DateTime(2024, 5, 15, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(186),
                            Iznos = 5f,
                            TipClanarineId = 8
                        },
                        new
                        {
                            PlacanjeId = 9,
                            Datum = new DateTime(2024, 5, 15, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(191),
                            Iznos = 60f,
                            TipClanarineId = 3
                        },
                        new
                        {
                            PlacanjeId = 10,
                            Datum = new DateTime(2024, 5, 15, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(197),
                            Iznos = 30f,
                            TipClanarineId = 2
                        });
                });

            modelBuilder.Entity("fitnessCentar.Services.Database.PlanIshrane", b =>
                {
                    b.Property<int>("PlanIshraneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanIshraneId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlanIshraneId");

                    b.ToTable("PlanIshranes");

                    b.HasData(
                        new
                        {
                            PlanIshraneId = 1,
                            Naziv = "Proteinska dijeta",
                            Opis = "Visok unos proteina, niskokaloricni obroci"
                        },
                        new
                        {
                            PlanIshraneId = 2,
                            Naziv = "Keto dijeta",
                            Opis = "Visok unos masti, vrlo nizak unos ugljenih hidrata"
                        },
                        new
                        {
                            PlanIshraneId = 3,
                            Naziv = "Mediteranska dijeta",
                            Opis = "Obilje voca, povrca, ribe i maslinovog ulja"
                        },
                        new
                        {
                            PlanIshraneId = 4,
                            Naziv = "Veganska dijeta",
                            Opis = "Ishrana bez proizvoda zivotinjskog porekla"
                        },
                        new
                        {
                            PlanIshraneId = 5,
                            Naziv = "Paleo dijeta",
                            Opis = "Ishrana bazirana na namirnicama iz paleolitskog doba"
                        },
                        new
                        {
                            PlanIshraneId = 6,
                            Naziv = "Bezglutenska dijeta",
                            Opis = "Izbjegavanje glutena u ishrani"
                        },
                        new
                        {
                            PlanIshraneId = 7,
                            Naziv = "DASH dijeta",
                            Opis = "Dijeta usmerena na smanjenje krvnog pritiska"
                        },
                        new
                        {
                            PlanIshraneId = 8,
                            Naziv = "Dijeta sa niskim unosom ugljenih hidrata",
                            Opis = "Smanjen unos ugljenih hidrata za mrsavljenje"
                        },
                        new
                        {
                            PlanIshraneId = 9,
                            Naziv = "Sirova hrana dijeta",
                            Opis = "Konzumacija sirovih i minimalno obradjenih namirnica"
                        },
                        new
                        {
                            PlanIshraneId = 10,
                            Naziv = "Zone dijeta",
                            Opis = "Izbalansiran unos proteina, masti i ugljenih hidrata"
                        });
                });

            modelBuilder.Entity("fitnessCentar.Services.Database.PlanIshraneKorisnik", b =>
                {
                    b.Property<int>("PlanIshraneKorisnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanIshraneKorisnikId"));

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int?>("PlanIshraneId")
                        .HasColumnType("int");

                    b.HasKey("PlanIshraneKorisnikId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("PlanIshraneId");

                    b.ToTable("PlanIshraneKorisniks");

                    b.HasData(
                        new
                        {
                            PlanIshraneKorisnikId = 1,
                            KorisnikId = 3,
                            PlanIshraneId = 1
                        },
                        new
                        {
                            PlanIshraneKorisnikId = 2,
                            KorisnikId = 3,
                            PlanIshraneId = 2
                        },
                        new
                        {
                            PlanIshraneKorisnikId = 3,
                            KorisnikId = 4,
                            PlanIshraneId = 1
                        },
                        new
                        {
                            PlanIshraneKorisnikId = 4,
                            KorisnikId = 5,
                            PlanIshraneId = 2
                        },
                        new
                        {
                            PlanIshraneKorisnikId = 5,
                            KorisnikId = 6,
                            PlanIshraneId = 3
                        },
                        new
                        {
                            PlanIshraneKorisnikId = 6,
                            KorisnikId = 7,
                            PlanIshraneId = 1
                        },
                        new
                        {
                            PlanIshraneKorisnikId = 7,
                            KorisnikId = 8,
                            PlanIshraneId = 2
                        },
                        new
                        {
                            PlanIshraneKorisnikId = 8,
                            KorisnikId = 9,
                            PlanIshraneId = 3
                        },
                        new
                        {
                            PlanIshraneKorisnikId = 9,
                            KorisnikId = 10,
                            PlanIshraneId = 1
                        },
                        new
                        {
                            PlanIshraneKorisnikId = 10,
                            KorisnikId = 11,
                            PlanIshraneId = 2
                        });
                });

            modelBuilder.Entity("fitnessCentar.Services.Database.Recenzija", b =>
                {
                    b.Property<int>("RecenzijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecenzijaId"));

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("Ocjena")
                        .HasColumnType("int");

                    b.Property<string>("Tekst")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreningId")
                        .HasColumnType("int");

                    b.HasKey("RecenzijaId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("TreningId");

                    b.ToTable("Recenzijas");

                    b.HasData(
                        new
                        {
                            RecenzijaId = 1,
                            KorisnikId = 3,
                            Ocjena = 5,
                            Tekst = "Odlican trening",
                            TreningId = 1
                        },
                        new
                        {
                            RecenzijaId = 2,
                            KorisnikId = 4,
                            Ocjena = 4,
                            Tekst = "Odlican trening, bas mi je prijalo!",
                            TreningId = 2
                        },
                        new
                        {
                            RecenzijaId = 3,
                            KorisnikId = 5,
                            Ocjena = 5,
                            Tekst = "Bilo je naporno, ali vrijedilo je.",
                            TreningId = 3
                        },
                        new
                        {
                            RecenzijaId = 4,
                            KorisnikId = 6,
                            Ocjena = 3,
                            Tekst = "Solidan trening, moglo bi biti bolje.",
                            TreningId = 1
                        },
                        new
                        {
                            RecenzijaId = 5,
                            KorisnikId = 7,
                            Ocjena = 5,
                            Tekst = "Fantasticna energija i atmosfera!",
                            TreningId = 2
                        },
                        new
                        {
                            RecenzijaId = 6,
                            KorisnikId = 8,
                            Ocjena = 2,
                            Tekst = "Bilo je previse intenzivno za mene.",
                            TreningId = 3
                        },
                        new
                        {
                            RecenzijaId = 7,
                            KorisnikId = 9,
                            Ocjena = 4,
                            Tekst = "Svidja mi se kako je trening strukturisan.",
                            TreningId = 1
                        },
                        new
                        {
                            RecenzijaId = 8,
                            KorisnikId = 10,
                            Ocjena = 3,
                            Tekst = "Nisam bas zadovoljan, ocekivala sam vise.",
                            TreningId = 2
                        },
                        new
                        {
                            RecenzijaId = 9,
                            KorisnikId = 11,
                            Ocjena = 5,
                            Tekst = "Vrhunski trening, osjecam se sjajno!",
                            TreningId = 3
                        },
                        new
                        {
                            RecenzijaId = 10,
                            KorisnikId = 12,
                            Ocjena = 4,
                            Tekst = "Trener je bio odlican, trening je bio izazovan.",
                            TreningId = 1
                        },
                        new
                        {
                            RecenzijaId = 11,
                            KorisnikId = 3,
                            Ocjena = 3,
                            Tekst = "Prosjecan trening, nista posebno.",
                            TreningId = 2
                        });
                });

            modelBuilder.Entity("fitnessCentar.Services.Database.Rezervacija", b =>
                {
                    b.Property<int>("RezervacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RezervacijaId"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreningId")
                        .HasColumnType("int");

                    b.HasKey("RezervacijaId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("TreningId");

                    b.ToTable("Rezervacijas");

                    b.HasData(
                        new
                        {
                            RezervacijaId = 1,
                            Datum = new DateTime(2024, 4, 15, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(1150),
                            KorisnikId = 3,
                            Status = "Odobrena",
                            TreningId = 1
                        },
                        new
                        {
                            RezervacijaId = 2,
                            Datum = new DateTime(2024, 4, 17, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(1172),
                            KorisnikId = 3,
                            Status = "NaCekanju",
                            TreningId = 1
                        },
                        new
                        {
                            RezervacijaId = 3,
                            Datum = new DateTime(2024, 4, 18, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(1179),
                            KorisnikId = 3,
                            Status = "Odbijena",
                            TreningId = 1
                        },
                        new
                        {
                            RezervacijaId = 4,
                            Datum = new DateTime(2024, 5, 16, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(1185),
                            KorisnikId = 4,
                            Status = "Odobrena",
                            TreningId = 2
                        },
                        new
                        {
                            RezervacijaId = 5,
                            Datum = new DateTime(2024, 5, 17, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(1191),
                            KorisnikId = 5,
                            Status = "NaCekanju",
                            TreningId = 2
                        },
                        new
                        {
                            RezervacijaId = 6,
                            Datum = new DateTime(2024, 5, 18, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(1196),
                            KorisnikId = 6,
                            Status = "Odbijena",
                            TreningId = 2
                        },
                        new
                        {
                            RezervacijaId = 7,
                            Datum = new DateTime(2024, 5, 16, 16, 31, 25, 995, DateTimeKind.Local).AddTicks(1201),
                            KorisnikId = 7,
                            Status = "Odobrena",
                            TreningId = 3
                        });
                });

            modelBuilder.Entity("fitnessCentar.Services.Database.TipClanarine", b =>
                {
                    b.Property<int>("TipClanarineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipClanarineId"));

                    b.Property<float>("Cijena")
                        .HasColumnType("real");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Trajanje")
                        .HasColumnType("int");

                    b.HasKey("TipClanarineId");

                    b.ToTable("TipClanarines");

                    b.HasData(
                        new
                        {
                            TipClanarineId = 1,
                            Cijena = 7f,
                            Naziv = "7-dnevna",
                            Trajanje = 7
                        },
                        new
                        {
                            TipClanarineId = 2,
                            Cijena = 30f,
                            Naziv = "30-dnevna",
                            Trajanje = 30
                        },
                        new
                        {
                            TipClanarineId = 3,
                            Cijena = 60f,
                            Naziv = "60-dnevna",
                            Trajanje = 60
                        },
                        new
                        {
                            TipClanarineId = 4,
                            Cijena = 15f,
                            Naziv = "Vikend paket",
                            Trajanje = 8
                        },
                        new
                        {
                            TipClanarineId = 5,
                            Cijena = 25f,
                            Naziv = "Student",
                            Trajanje = 30
                        },
                        new
                        {
                            TipClanarineId = 6,
                            Cijena = 100f,
                            Naziv = "Porodicna",
                            Trajanje = 30
                        },
                        new
                        {
                            TipClanarineId = 7,
                            Cijena = 20f,
                            Naziv = "Seniorska",
                            Trajanje = 30
                        },
                        new
                        {
                            TipClanarineId = 8,
                            Cijena = 5f,
                            Naziv = "Proba-7-dnevna",
                            Trajanje = 7
                        });
                });

            modelBuilder.Entity("fitnessCentar.Services.Database.Trening", b =>
                {
                    b.Property<int>("TreningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreningId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TreningId");

                    b.ToTable("Trenings");

                    b.HasData(
                        new
                        {
                            TreningId = 1,
                            Naziv = "Trening ruku",
                            Opis = "Opis treninga ruku"
                        },
                        new
                        {
                            TreningId = 2,
                            Naziv = "Trening nogu",
                            Opis = "Opis treninga nogu"
                        },
                        new
                        {
                            TreningId = 3,
                            Naziv = "Trening ledja",
                            Opis = "Opis treninga ledja"
                        },
                        new
                        {
                            TreningId = 4,
                            Naziv = "Trening ramena",
                            Opis = "Opis treninga ramena"
                        },
                        new
                        {
                            TreningId = 5,
                            Naziv = "Kardio trening",
                            Opis = "Opis kardio treninga"
                        },
                        new
                        {
                            TreningId = 6,
                            Naziv = "Trening za cjelokupno tijelo",
                            Opis = "Opis treninga za cjelokupno tijelo"
                        },
                        new
                        {
                            TreningId = 7,
                            Naziv = "Pilates",
                            Opis = "Opis pilates treninga"
                        },
                        new
                        {
                            TreningId = 8,
                            Naziv = "Yoga",
                            Opis = "Opis yoga treninga"
                        },
                        new
                        {
                            TreningId = 9,
                            Naziv = "Trening za snagu",
                            Opis = "Opis treninga za snagu"
                        },
                        new
                        {
                            TreningId = 10,
                            Naziv = "Trening ledja",
                            Opis = "Opis treninga ledja"
                        });
                });

            modelBuilder.Entity("fitnessCentar.Services.Database.Uloga", b =>
                {
                    b.Property<int>("UlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UlogaId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UlogaId");

                    b.ToTable("Ulogas");

                    b.HasData(
                        new
                        {
                            UlogaId = 1,
                            Naziv = "Admin"
                        },
                        new
                        {
                            UlogaId = 2,
                            Naziv = "Uposlenik"
                        },
                        new
                        {
                            UlogaId = 3,
                            Naziv = "Korisnik"
                        });
                });

            modelBuilder.Entity("fitnessCentar.Services.Database.Clanarina", b =>
                {
                    b.HasOne("fitnessCentar.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Clanarinas")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fitnessCentar.Services.Database.TipClanarine", "TipClanarine")
                        .WithMany()
                        .HasForeignKey("TipClanarineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("TipClanarine");
                });

            modelBuilder.Entity("fitnessCentar.Services.Database.Korisnik", b =>
                {
                    b.HasOne("fitnessCentar.Services.Database.Uloga", "Uloga")
                        .WithMany("Korisniks")
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("fitnessCentar.Services.Database.Placanja", b =>
                {
                    b.HasOne("fitnessCentar.Services.Database.TipClanarine", "TipClanarine")
                        .WithMany()
                        .HasForeignKey("TipClanarineId");

                    b.Navigation("TipClanarine");
                });

            modelBuilder.Entity("fitnessCentar.Services.Database.PlanIshraneKorisnik", b =>
                {
                    b.HasOne("fitnessCentar.Services.Database.Korisnik", "Korisnik")
                        .WithMany("PlanIshraneKorisniks")
                        .HasForeignKey("KorisnikId");

                    b.HasOne("fitnessCentar.Services.Database.PlanIshrane", "PlanIshrane")
                        .WithMany("PlanIshraneKorisniks")
                        .HasForeignKey("PlanIshraneId");

                    b.Navigation("Korisnik");

                    b.Navigation("PlanIshrane");
                });

            modelBuilder.Entity("fitnessCentar.Services.Database.Recenzija", b =>
                {
                    b.HasOne("fitnessCentar.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Recenzijas")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fitnessCentar.Services.Database.Trening", "Trening")
                        .WithMany("Recenzijas")
                        .HasForeignKey("TreningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Trening");
                });

            modelBuilder.Entity("fitnessCentar.Services.Database.Rezervacija", b =>
                {
                    b.HasOne("fitnessCentar.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Rezervacijas")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fitnessCentar.Services.Database.Trening", "Trening")
                        .WithMany("Rezervacijas")
                        .HasForeignKey("TreningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Trening");
                });

            modelBuilder.Entity("fitnessCentar.Services.Database.Korisnik", b =>
                {
                    b.Navigation("Clanarinas");

                    b.Navigation("PlanIshraneKorisniks");

                    b.Navigation("Recenzijas");

                    b.Navigation("Rezervacijas");
                });

            modelBuilder.Entity("fitnessCentar.Services.Database.PlanIshrane", b =>
                {
                    b.Navigation("PlanIshraneKorisniks");
                });

            modelBuilder.Entity("fitnessCentar.Services.Database.Trening", b =>
                {
                    b.Navigation("Recenzijas");

                    b.Navigation("Rezervacijas");
                });

            modelBuilder.Entity("fitnessCentar.Services.Database.Uloga", b =>
                {
                    b.Navigation("Korisniks");
                });
#pragma warning restore 612, 618
        }
    }
}
